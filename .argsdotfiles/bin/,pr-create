#!/usr/bin/env python

import subprocess
import openai
import os
import shlex
from yaspin import yaspin
import json

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

current_branch = subprocess.check_output(
    "git branch --show-current", shell=True, universal_newlines=True).strip()

if current_branch == "main" or current_branch == "master":
    print("Error: cannot create pull request from main or master branch. Checkout to some branch first.")
    exit(1)


def git_branch():
    with yaspin(text="Collecting git branch", color="yellow") as spinner:
        try:
            output = subprocess.check_output(
                "git branch --show-current", shell=True, universal_newlines=True).strip()
            spinner.ok("✔")
            return output
        except subprocess.CalledProcessError as e:
            spinner.fail("✗")
            print(f"An error occurred while collecting git branch: {str(e)}")
            return None


def gitprlog():
    with yaspin(text="Collecting git log", color="yellow") as spinner:
        try:
            base_commit = subprocess.check_output(
                "git merge-base HEAD $(git show-ref --verify --quiet refs/heads/main && echo 'main' || echo 'master')",
                shell=True,
                universal_newlines=True
            ).strip()

            output = subprocess.check_output(
                f'git log --reverse --pretty=format:"* %s%n%w(0,4,4)%b" {base_commit}..HEAD',
                shell=True,
                universal_newlines=True
            )
            spinner.ok("✔")
            return output
        except subprocess.CalledProcessError as e:
            spinner.fail("✗")
            print(f"An error occurred while collecting git log: {str(e)}")
            return None


def generate_chat_response(current_branch, git_log, log_text):
    openai.api_key = OPENAI_API_KEY

    with yaspin(text=log_text, color="yellow") as spinner:
        try:
            response = openai.ChatCompletion.create(
                model='gpt-4',
                temperature=0.2,
                function_call={'name': "create_pr"},
                functions=[
                    {
                        'name': "create_pr",
                        'description': "Generate next step of the story, illustration and two choices",
                        'parameters': {
                            'type': "object",
                            'properties': {
                                'title': {
                                    'type': "string",
                                    'description': "Short title (max 100) chars",
                                },
                                'description': {
                                    'type': "string",
                                    'description':
                                    """Short and accurate description. It should be quick and easy to understand for reviewers. Use markdown format if needed (e.g. bullet lists, code snippets and similar).""",
                                },
                            },
                            'required': ['title', 'description'],
                        },
                    },
                ],
                n=1,
                messages=[
                    {
                        'role': 'system',
                        'content': """you are expert software engineer preparing title and description for GitHub Pull
                        Request. You are given branch name and git commit log and using them you summarize the key changes into a short (max 100 chars) title and description.""".strip()
                    },
                    {'role': 'user', 'content': f"Branch name: {current_branch}"},
                    {'role': 'user', 'content': f"Git log:\n\n{git_log}"}
                ]
            )

            api_response: str | None = response['choices'][0]['message']['function_call'][
                'arguments'] if 'function_call' in response['choices'][0]['message'] else None

            if api_response:
                try:
                    parsed = json.loads(api_response)
                    title = parsed['title']
                    description = parsed['description']
                    spinner.ok("✔")
                    return title, description
                except Exception as e:
                    spinner.fail("✗")
                    print(
                        f"An error occurred during chat response parsing: {str(e)}")
                    return None, None

            spinner.fail("✗")
            return None, None
        except Exception as e:
            spinner.fail("✗")
            print(
                f"An error occurred during chat response generation: {str(e)}")
            return None, None


def check_remote_branch_exists(branch):
    command = ['git', 'ls-remote', '--heads', 'origin', f'refs/heads/{branch}']
    result = subprocess.run(command, text=True, capture_output=True)
    # Branch exists if result.stdout (which will contain the SHA1 hashes) is not empty.
    return bool(result.stdout.strip())


def push_create_pr_if_needed(branch):
    if not check_remote_branch_exists(branch):
        command = ['git', 'push', 'origin', branch]
        result = subprocess.run(command, text=True, capture_output=True)
        if result.returncode != 0:
            raise Exception(
                f'Push to branch {branch} failed with exit code {result.returncode}')


def create_pull_request(title, body, current_branch):
    push_create_pr_if_needed(current_branch)

    with yaspin(text="Creating pull request", color="yellow") as spinner:
        command = ['gh', 'pr', 'create', '--assignee', '@me',
                   '--title', title, '--body', body]
        result = subprocess.run(command, text=True, capture_output=True)

        if result.returncode == 0:
            spinner.ok("✔")
            print(result.stdout)
        elif "already exists" in result.stderr:
            spinner.stop()
            print("Pull request already exists, will edit it.")
            edit_pull_request(title, body)
        elif result.stderr not in ["", "\n"]:
            spinner.fail("✗")
            raise Exception(result.stderr)
        else:
            spinner.fail("✗")
            raise Exception(
                f"Pull request creation failed with exit code {result.returncode}")


def edit_pull_request(title, body):
    with yaspin(text="Editing pull request", color="yellow") as spinner:
        command = f'gh pr edit --title {shlex.quote(title)} --body {shlex.quote(body)}'
        exit_code = os.system(command)

        if exit_code == 0:
            spinner.ok("✔")
            print("Pull request edited successfully.")
        else:
            spinner.fail("✗")
            raise Exception(
                f"Pull request edit failed with exit code {exit_code}")


git_log = gitprlog()
current_branch = git_branch()

if git_log:
    title, description = generate_chat_response(
        current_branch,
        git_log, "Generating title and description")

    log = git_log.replace('\n\n', '\n')
    body = f"{description}\n\n<details><summary>Full commit log</summary>\n\n{log}\n\n</details>"
    if title and body:
        try:
            create_pull_request(title, body, current_branch)
        except Exception as e:
            print(
                f"An error occurred while creating pull request:\n\n{str(e)}")
    else:
        print("An error occurred while generating title and description.")
        print("Pull request will not be created.")
